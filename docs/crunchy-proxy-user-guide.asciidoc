= User Guide - Crunchy Proxy
Crunchy Data Solutions, Inc.
v0.0.1, {docdate}
image::crunchy_logo.png?raw=true[]

== Usage

The command syntax of the proxy is as follows:

....
crunchyproxy -config=config.json
....

The only command option is the *-config* flag.  This option specifies
the proxy configuration to use.

The proxy uses link:https://godoc.org/github.com/golang/glog[glog] for logging, to see the log output, run the proxy with this command:
....
crunchyproxy -config=config.json -logtostderr=true
....

Increase the logging level this way:
....
crunchyproxy -config=config.json -logtostderr=true -v 2
....

== Configuration

The proxy configuration is controlled by a single configuration file which
is written in JSON format.

The JSON file is read at startup and is currently not reloaded after
execution starts.

The JSON parameters include:
.An example table
[width="90%",cols="30,40,30", frame="topbot",options="header,footer"]
|======================
|Parameter | Purpose | Example
|Name        | a name you want to give the configuration | "myconfig"
|IPAddr        | the proxy host:port to listen to| "localhost:5432"
|AdminIPAddr        |the proxy admin host:port | "localhost:10000"
|heathcheck.delay        |seconds to delay between checks| 60
|heathcheck.query        |SQL to use for check | "select now()"
|pool.enabled        |enable connection pooling | true
|pool.capacity        |size of pools | 2
|credentials.username        |postgres username for pool connections | "postgres"
|credentials.password        |postgres password for pool connections | "password"
|credentials.database        |postgres database for pool connections | "postgres"
|adapters|not implemented yet | "logging"
|Master.IPAddr| the master backend hostname:port| "127.0.0.1:12000"
|Replicas.IPAddr| the replica backend hostname:port| "127.0.0.1:12002"
|======================

== Start the Test PostgreSQL Cluster

Run the database script as follows:
....
bin/run-cluster.sh
....

This will start two docker containers that execute the PostgreSQL cluster.

This will start a Postgres 9.5 master container that listens on
*localhost:12000* and a replica container that listens on *localhost:12002*

The PostgreSQL user id is *postgres*, the password is *password*, and you
would connect to these container database like this using psql:
....
psql -h 127.0.0.1 -p 12000 -U postgres postgres
psql -h 127.0.0.1 -p 12002 -U postgres postgres
....

Stop the containers like this:
....
docker stop master
docker stop replica
....

Start the containers like this:
....
docker start master
docker start replica
....

== Execution

Start the crunchy-proxy like this:
....
go run crunchyproxy.go -config=config.json
....

This will do the following:

 * start an admin service on localhost:10000
 * listen on localhost:5432 for client requests
 * read config.json and set up a runtime configuration
 * route any client messages to the PostgreSQL containers

== Benchmark

There is a supplied benchmark test you can run, first start
up a pgpool instance:
....
./bin/run-pgpool.sh
....

Next, run some tests using the pgpool proxy and then the crunchy-proxy:
....
cd ./testclient
./run-test-pgpool.sh
./run-test-proxy.sh
....


=== Test PostgreSQL Client

You can test the proxy using the *psql* PostgreSQL utility or there is a 
test PostgreSQL client program created when you run the 
*testclient.go* code.  This is a client that sends messages
to the proxy and will print out the responses from the proxy.

Run the test pg client like this:
....
cd testclient
./run-test-proxy.sh
....

== Proxy Administration

There is an administration port created by the proxy that you
can interact with to gain status from the proxy.   

=== Events 

Events like a healthcheck status are published to any subscribers
using a streaming REST API, you can access the admin events 
as follows:
....
curl -i http://localhost:10000/api/stream
....

As the proxy publishes events, your REST client (e.g. curl) will receive
the events.

=== Configuration

You can get the current configuration of the proxy as follows:
....
curl http://localhost:10000/api/config
....

=== Statistics

You can get the current statistics of the proxy as follows:
....
curl http://localhost:10000/api/stats
....

== Legal Notices

Copyright Â© 2016 Crunchy Data Solutions, Inc.

CRUNCHY DATA SOLUTIONS, INC. PROVIDES THIS GUIDE "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF NON INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.

Crunchy, Crunchy Data Solutions, Inc. and the Crunchy Hippo Logo are trademarks of Crunchy Data Solutions, Inc.

