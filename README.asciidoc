= Installation Guide - Crunchy Proxy
Crunchy Data Solutions, Inc.
v0.0.1, {docdate}
image::docs/crunchy_logo.png?raw=true[]

== Project

*crunchy-proxy* is an experimental PostgreSQL-aware proxy used to handle PostgreSQL application requests.  In the diagram below, a PostgreSQL
client application would connect to the proxy which appears as any other
PostgreSQL database connection.  The proxy would accept the inbound client
requests, and route them to an appropriate PostgreSQL cluster member.

image::docs/proxy-diagram.svg?raw=true[]

To the PostgreSQL server, the proxy is transparent and appears as any other
PostgreSQL client would appear.  Within the proxy, various capabilities are
found including:

 * route messages based on the SQL command type, writes are
   sent to a master and reads are sent to replicas in a round-robin fashion
 * configuration via JSON file
 * PostgreSQL healthcheck
 * route inbound client messages based on the health of PostgreSQL
 * REST administrative interface
 * publish healthcheck events to consumers outside of the proxy
 * load balance SQL statements across multiple replica backends
 * connection pooling

== Approach

One of the key features of the *crunchy-proxy* is to figure out how
to route SQL statements to a PostgreSQL cluster members.  This feature
allows end-user applications to see a PostgreSQL cluster as a single
connection.  This feature requires some knowledge of the SQL that
an application sends to PostgreSQL.

One approach (e.g. link:http://www.pgpool.net/mediawiki/index.php/Main_Page[pgpool]) is to parse each SQL statement looking
for grammar that would imply a *write* or *update* and then send
those SQL statements to the cluster master.  SQL statements that
are determined to be *read-only* in nature are safe to send to the
cluster replica members.  Remember, in PostgreSQL cluster replica 
members are only able to process SQL that is *read-only* in nature.

For *crunchy-proxy* we have taken a different approach to SQL routing.
Instead of parsing the entire SQL grammer of each SQL statement, *crunchy-proxy* uses a simple annotation, supplied by the end-user within their SQL
statement, to determine the routing destination.

For example, the following SQL statement is annotated to indicate it
is a *read-only* SQL statement:
....
/* read */ select now();
....

Examples of a *write* SQL statement include the following:
....
create table boofar (id int);
drop /* write */ table boofar (id int);
....

If a SQL statement doesn't include an annotation, the the statement
is considered a *write* and sent to the master cluster member.

The *crunchy-proxy* parses only the annotation which greatly simplfies
the problem of determining where to send a SQL statement into a PostgreSQL
cluster. 

The key tradeoff with this design is whether a user has access to their
application's SQL and the ability to add the annotation.  If they do, then
they can use the *crunchy-proxy* for SQL routing.  Our estimate is that
most users do indeed have access to their SQL source code and understand
it enough to place the annotation.

The upside of this design choice includes:

 * much simpler proxy parsing implementation
 * huge increase in proxy throughput
 * better routing accuracy

== Performance

Comparing the throughtput of *crunchy-proxy* to pgpool, the performance
gains are promising, here is chart that shows the time it takes
to proxy 100 very small SQL statements (e.g. select /* read */ now()):

image::docs/proxy-performance.png?raw=true[]

Interestingly, with this design approach, as the size of your SQL statement
grows, the performance gains increase.  

== Execution

The proxy is a golang binary, if you build the binary from source
you can run it as follows:
....
crunchyproxy -config=config.json
....

Instructions on building from source along with a description of the design
are found in the link:docs/crunchy-proxy-dev-guide.asciidoc[Developer Guide] 

For Docker users, you can run the proxy using the 
link:bin/run-docker.sh[run-docker.sh] script.

The link:docs/crunchy-proxy-user-guide.asciidoc[User Guide] describes the configuration file format along with other usage information.


== Feedback

If you find a bug, or want to provide feedback on the design and features 
feel free to create a github issue.  


== Legal Notices

Copyright Â© 2016 Crunchy Data Solutions, Inc.

CRUNCHY DATA SOLUTIONS, INC. PROVIDES THIS GUIDE "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF NON INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.

Crunchy, Crunchy Data Solutions, Inc. and the Crunchy Hippo Logo are trademarks of Crunchy Data Solutions, Inc.

