// Code generated by protoc-gen-go.
// source: admin.proto
// DO NOT EDIT!

/*
Package serverpb is a generated protocol buffer package.

It is generated from these files:
	admin.proto

It has these top-level messages:
	NodeRequest
	NodeResponse
	PoolRequest
	PoolResponse
	HealthRequest
	HealthResponse
	StatisticsRequest
	StatisticsResponse
	ShutdownRequest
	ShutdownResponse
*/
package serverpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// NodeRequest requests a list of nodes.
type NodeRequest struct {
}

func (m *NodeRequest) Reset()                    { *m = NodeRequest{} }
func (m *NodeRequest) String() string            { return proto.CompactTextString(m) }
func (*NodeRequest) ProtoMessage()               {}
func (*NodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// NodeResponse contains a list of nodes.
type NodeResponse struct {
	Nodes map[string]string `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *NodeResponse) Reset()                    { *m = NodeResponse{} }
func (m *NodeResponse) String() string            { return proto.CompactTextString(m) }
func (*NodeResponse) ProtoMessage()               {}
func (*NodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *NodeResponse) GetNodes() map[string]string {
	if m != nil {
		return m.Nodes
	}
	return nil
}

// PoolRequest requests a list of pools.
type PoolRequest struct {
}

func (m *PoolRequest) Reset()                    { *m = PoolRequest{} }
func (m *PoolRequest) String() string            { return proto.CompactTextString(m) }
func (*PoolRequest) ProtoMessage()               {}
func (*PoolRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// PoolResponse contains a list of pools.
type PoolResponse struct {
	Pools []string `protobuf:"bytes,1,rep,name=pools" json:"pools,omitempty"`
}

func (m *PoolResponse) Reset()                    { *m = PoolResponse{} }
func (m *PoolResponse) String() string            { return proto.CompactTextString(m) }
func (*PoolResponse) ProtoMessage()               {}
func (*PoolResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PoolResponse) GetPools() []string {
	if m != nil {
		return m.Pools
	}
	return nil
}

type HealthRequest struct {
}

func (m *HealthRequest) Reset()                    { *m = HealthRequest{} }
func (m *HealthRequest) String() string            { return proto.CompactTextString(m) }
func (*HealthRequest) ProtoMessage()               {}
func (*HealthRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type HealthResponse struct {
	Health map[string]bool `protobuf:"bytes,1,rep,name=health" json:"health,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (m *HealthResponse) Reset()                    { *m = HealthResponse{} }
func (m *HealthResponse) String() string            { return proto.CompactTextString(m) }
func (*HealthResponse) ProtoMessage()               {}
func (*HealthResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *HealthResponse) GetHealth() map[string]bool {
	if m != nil {
		return m.Health
	}
	return nil
}

type StatisticsRequest struct {
}

func (m *StatisticsRequest) Reset()                    { *m = StatisticsRequest{} }
func (m *StatisticsRequest) String() string            { return proto.CompactTextString(m) }
func (*StatisticsRequest) ProtoMessage()               {}
func (*StatisticsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type StatisticsResponse struct {
	Queries map[string]int32 `protobuf:"bytes,1,rep,name=queries" json:"queries,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (m *StatisticsResponse) Reset()                    { *m = StatisticsResponse{} }
func (m *StatisticsResponse) String() string            { return proto.CompactTextString(m) }
func (*StatisticsResponse) ProtoMessage()               {}
func (*StatisticsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *StatisticsResponse) GetQueries() map[string]int32 {
	if m != nil {
		return m.Queries
	}
	return nil
}

// ShutdownRequest requests the server to shutdown.
type ShutdownRequest struct {
}

func (m *ShutdownRequest) Reset()                    { *m = ShutdownRequest{} }
func (m *ShutdownRequest) String() string            { return proto.CompactTextString(m) }
func (*ShutdownRequest) ProtoMessage()               {}
func (*ShutdownRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

// ShutdownResponse contains the the state of the proxy.
type ShutdownResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *ShutdownResponse) Reset()                    { *m = ShutdownResponse{} }
func (m *ShutdownResponse) String() string            { return proto.CompactTextString(m) }
func (*ShutdownResponse) ProtoMessage()               {}
func (*ShutdownResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ShutdownResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*NodeRequest)(nil), "crunchyproxy.server.serverpb.NodeRequest")
	proto.RegisterType((*NodeResponse)(nil), "crunchyproxy.server.serverpb.NodeResponse")
	proto.RegisterType((*PoolRequest)(nil), "crunchyproxy.server.serverpb.PoolRequest")
	proto.RegisterType((*PoolResponse)(nil), "crunchyproxy.server.serverpb.PoolResponse")
	proto.RegisterType((*HealthRequest)(nil), "crunchyproxy.server.serverpb.HealthRequest")
	proto.RegisterType((*HealthResponse)(nil), "crunchyproxy.server.serverpb.HealthResponse")
	proto.RegisterType((*StatisticsRequest)(nil), "crunchyproxy.server.serverpb.StatisticsRequest")
	proto.RegisterType((*StatisticsResponse)(nil), "crunchyproxy.server.serverpb.StatisticsResponse")
	proto.RegisterType((*ShutdownRequest)(nil), "crunchyproxy.server.serverpb.ShutdownRequest")
	proto.RegisterType((*ShutdownResponse)(nil), "crunchyproxy.server.serverpb.ShutdownResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Admin service

type AdminClient interface {
	Nodes(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*NodeResponse, error)
	Pools(ctx context.Context, in *PoolRequest, opts ...grpc.CallOption) (*PoolResponse, error)
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
	Statistics(ctx context.Context, in *StatisticsRequest, opts ...grpc.CallOption) (*StatisticsResponse, error)
	Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (Admin_ShutdownClient, error)
}

type adminClient struct {
	cc *grpc.ClientConn
}

func NewAdminClient(cc *grpc.ClientConn) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) Nodes(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*NodeResponse, error) {
	out := new(NodeResponse)
	err := grpc.Invoke(ctx, "/crunchyproxy.server.serverpb.Admin/Nodes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) Pools(ctx context.Context, in *PoolRequest, opts ...grpc.CallOption) (*PoolResponse, error) {
	out := new(PoolResponse)
	err := grpc.Invoke(ctx, "/crunchyproxy.server.serverpb.Admin/Pools", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := grpc.Invoke(ctx, "/crunchyproxy.server.serverpb.Admin/Health", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) Statistics(ctx context.Context, in *StatisticsRequest, opts ...grpc.CallOption) (*StatisticsResponse, error) {
	out := new(StatisticsResponse)
	err := grpc.Invoke(ctx, "/crunchyproxy.server.serverpb.Admin/Statistics", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (Admin_ShutdownClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Admin_serviceDesc.Streams[0], c.cc, "/crunchyproxy.server.serverpb.Admin/Shutdown", opts...)
	if err != nil {
		return nil, err
	}
	x := &adminShutdownClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Admin_ShutdownClient interface {
	Recv() (*ShutdownResponse, error)
	grpc.ClientStream
}

type adminShutdownClient struct {
	grpc.ClientStream
}

func (x *adminShutdownClient) Recv() (*ShutdownResponse, error) {
	m := new(ShutdownResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Admin service

type AdminServer interface {
	Nodes(context.Context, *NodeRequest) (*NodeResponse, error)
	Pools(context.Context, *PoolRequest) (*PoolResponse, error)
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	Statistics(context.Context, *StatisticsRequest) (*StatisticsResponse, error)
	Shutdown(*ShutdownRequest, Admin_ShutdownServer) error
}

func RegisterAdminServer(s *grpc.Server, srv AdminServer) {
	s.RegisterService(&_Admin_serviceDesc, srv)
}

func _Admin_Nodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).Nodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crunchyproxy.server.serverpb.Admin/Nodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).Nodes(ctx, req.(*NodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_Pools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).Pools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crunchyproxy.server.serverpb.Admin/Pools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).Pools(ctx, req.(*PoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crunchyproxy.server.serverpb.Admin/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_Statistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).Statistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crunchyproxy.server.serverpb.Admin/Statistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).Statistics(ctx, req.(*StatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_Shutdown_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ShutdownRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AdminServer).Shutdown(m, &adminShutdownServer{stream})
}

type Admin_ShutdownServer interface {
	Send(*ShutdownResponse) error
	grpc.ServerStream
}

type adminShutdownServer struct {
	grpc.ServerStream
}

func (x *adminShutdownServer) Send(m *ShutdownResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Admin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "crunchyproxy.server.serverpb.Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Nodes",
			Handler:    _Admin_Nodes_Handler,
		},
		{
			MethodName: "Pools",
			Handler:    _Admin_Pools_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _Admin_Health_Handler,
		},
		{
			MethodName: "Statistics",
			Handler:    _Admin_Statistics_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Shutdown",
			Handler:       _Admin_Shutdown_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "admin.proto",
}

func init() { proto.RegisterFile("admin.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 512 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x94, 0x4f, 0x6b, 0xd4, 0x40,
	0x18, 0xc6, 0x99, 0x2d, 0xd9, 0x6e, 0xdf, 0xdd, 0xed, 0x6e, 0xc7, 0x56, 0x96, 0xd8, 0x43, 0x09,
	0x1e, 0x6a, 0xad, 0x49, 0xa9, 0x08, 0xeb, 0x82, 0x07, 0x05, 0x41, 0x10, 0xa4, 0xa6, 0x07, 0xc1,
	0x8b, 0xa4, 0xd9, 0xa1, 0x09, 0xc6, 0x99, 0x34, 0x33, 0xa9, 0x06, 0x6f, 0x1e, 0x8a, 0x77, 0xf1,
	0xe8, 0x07, 0xf0, 0xf3, 0xf8, 0x15, 0xfc, 0x20, 0x25, 0xf3, 0xa7, 0x3b, 0x65, 0x61, 0x93, 0x9e,
	0x76, 0xdf, 0x77, 0xe7, 0x7d, 0x9f, 0xe7, 0xd9, 0xf9, 0x25, 0xd0, 0x8f, 0xe6, 0x5f, 0x52, 0xea,
	0xe7, 0x05, 0x13, 0x0c, 0xef, 0xc6, 0x45, 0x49, 0xe3, 0xa4, 0xca, 0x0b, 0xf6, 0xad, 0xf2, 0x39,
	0x29, 0x2e, 0x49, 0xa1, 0x3f, 0xf2, 0x33, 0x77, 0xf7, 0x9c, 0xb1, 0xf3, 0x8c, 0x04, 0x51, 0x9e,
	0x06, 0x11, 0xa5, 0x4c, 0x44, 0x22, 0x65, 0x94, 0xab, 0x59, 0x6f, 0x08, 0xfd, 0x77, 0x6c, 0x4e,
	0x42, 0x72, 0x51, 0x12, 0x2e, 0xbc, 0xdf, 0x08, 0x06, 0xaa, 0xe6, 0x39, 0xa3, 0x9c, 0xe0, 0xb7,
	0xe0, 0x50, 0x36, 0x27, 0x7c, 0x82, 0xf6, 0xd6, 0xf6, 0xfb, 0xc7, 0xcf, 0xfc, 0x55, 0x5a, 0xbe,
	0x3d, 0x2a, 0x0b, 0xfe, 0x9a, 0x8a, 0xa2, 0x0a, 0xd5, 0x0e, 0x77, 0x0a, 0xb0, 0x68, 0xe2, 0x31,
	0xac, 0x7d, 0x26, 0xd5, 0x04, 0xed, 0xa1, 0xfd, 0x8d, 0xb0, 0xfe, 0x8a, 0xb7, 0xc1, 0xb9, 0x8c,
	0xb2, 0x92, 0x4c, 0x3a, 0xb2, 0xa7, 0x8a, 0x59, 0x67, 0x8a, 0x6a, 0x9b, 0x27, 0x8c, 0x65, 0xc6,
	0xe6, 0x43, 0x18, 0xa8, 0x52, 0xbb, 0xdc, 0x06, 0x27, 0x67, 0x2c, 0x53, 0x2e, 0x37, 0x42, 0x55,
	0x78, 0x23, 0x18, 0xbe, 0x21, 0x51, 0x26, 0x12, 0x33, 0xf6, 0x07, 0xc1, 0xa6, 0xe9, 0xe8, 0xc9,
	0x13, 0xe8, 0x26, 0xb2, 0xa3, 0x03, 0x4e, 0x57, 0x07, 0xbc, 0x3d, 0xad, 0x4b, 0x95, 0x51, 0xef,
	0x71, 0x9f, 0x43, 0xdf, 0x6a, 0x37, 0xa5, 0xec, 0xd9, 0x29, 0xef, 0xc1, 0xd6, 0x69, 0x7d, 0x3d,
	0x5c, 0xa4, 0x31, 0x37, 0xa6, 0xff, 0x22, 0xc0, 0x76, 0x57, 0x1b, 0xff, 0x00, 0xeb, 0x17, 0x25,
	0x29, 0xd2, 0x9b, 0xab, 0x79, 0xb1, 0xda, 0xf9, 0xf2, 0x0a, 0xff, 0xbd, 0x9a, 0x57, 0xf6, 0xcd,
	0x36, 0x77, 0x06, 0x03, 0xfb, 0x87, 0xa6, 0x00, 0x8e, 0x1d, 0x60, 0x0b, 0x46, 0xa7, 0x49, 0x29,
	0xe6, 0xec, 0x2b, 0x35, 0xf6, 0x0f, 0x61, 0xbc, 0x68, 0x69, 0xef, 0x13, 0x58, 0xe7, 0x65, 0x1c,
	0x13, 0xce, 0xe5, 0xda, 0x5e, 0x68, 0xca, 0xe3, 0x2b, 0x07, 0x9c, 0x97, 0x35, 0xda, 0xb8, 0x04,
	0x47, 0xb2, 0x82, 0x1f, 0xb5, 0x41, 0x4e, 0x6a, 0xb9, 0x07, 0xed, 0xe9, 0xf4, 0x76, 0x7e, 0xfc,
	0xfb, 0xff, 0xab, 0x33, 0xc2, 0xc3, 0xe0, 0x93, 0x7c, 0x96, 0x02, 0x89, 0x68, 0x2d, 0x5b, 0x93,
	0xd5, 0x28, 0x6b, 0xd1, 0xd8, 0x24, 0x6b, 0x93, 0xba, 0x2c, 0x2b, 0x51, 0xc5, 0xdf, 0xa1, 0xab,
	0xa0, 0xc1, 0x8f, 0xdb, 0x01, 0xa8, 0x94, 0x0f, 0xef, 0x42, 0xab, 0x77, 0x5f, 0x6a, 0x8f, 0xf1,
	0xa6, 0xd1, 0x56, 0xc4, 0xe2, 0x2b, 0x04, 0xb0, 0xc0, 0x03, 0x07, 0xed, 0x41, 0x52, 0x2e, 0x8e,
	0xee, 0x4a, 0xde, 0xf2, 0xbf, 0xc0, 0x45, 0x24, 0x38, 0xfe, 0x89, 0xa0, 0x67, 0x60, 0xc1, 0x4f,
	0x1a, 0xb6, 0xde, 0xe6, 0xcc, 0xf5, 0xdb, 0x1e, 0xd7, 0x16, 0x1e, 0x48, 0x0b, 0x3b, 0xde, 0xf8,
	0xc6, 0x82, 0x3e, 0x31, 0x43, 0x07, 0x47, 0xe8, 0x15, 0x7c, 0xec, 0x99, 0xd9, 0xb3, 0xae, 0x7c,
	0x55, 0x3e, 0xbd, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x5c, 0x36, 0xe6, 0x1a, 0x75, 0x05, 0x00, 0x00,
}
